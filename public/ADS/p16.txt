#include<stdio.h>
#define N 4
int parent[N];
int find(int i) {
    if (parent[i] == i)
        return i;
    return find(parent[i]);  }
void union1(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;   }
void kruskal(int cost[N][N]) {
    int i, j, a, b, min, minCost = 0;
    for (i = 0; i < N; i++)
        parent[i] = i;
    while (1) {
        min = 999;
        for (i = 0; i < N; i++) {
            for (j = 0; j < N; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    a = i;
                    b = j;   }   }  }
        if (min == 999)
            break;
        cost[a][b] = cost[b][a] = 999;
        union1(a, b);
        printf("Edge %d-%d is included in the minimum spanning tree\n", a, b);
        minCost += min;  }
    printf("The minimum spanning tree is %d\n", minCost);   }
int main() {
    int cost[N][N] = { {2, 3, 4, 5},
                       {3, 2, 3, 4},
                       {4, 3, 2, 3},
                       {5, 4, 3, 2} };
    kruskal(cost);
    return 0;   }